def build_prompt(text=None, audio_text="", image_desc="", weather=None, lang="ta"):
    text = text or ""
    audio_text = audio_text or ""
    image_desc = image_desc or ""
    weather = weather or {"temp": "NA", "humidity": "NA", "condition": "NA"}

    parts = []

    if text.strip():
        parts.append(f"ЁЯУЭ {text.strip()}")

    if audio_text.strip():
        parts.append(f"ЁЯОд {audio_text.strip()}")

    if image_desc.strip():
        parts.append(f"ЁЯЦ╝я╕П {image_desc.strip()}")

    input_summary = "\n".join(parts) or "[роЙро│рпНро│рпАроЯрпБ роЗро▓рпНро▓рпИ / рдХреЛрдИ рдЗрдирдкреБрдЯ рдирд╣реАрдВ]"

    if lang == "hi":
        return f"""рдЖрдк рдПрдХ рдмреБрджреНрдзрд┐рдорд╛рди рдмрд╣реБрднрд╛рд╖реА рдХреГрд╖рд┐ рд╕рд╣рд╛рдпрдХ AI рд╣реИрдВред рдХрд┐рд╕рд╛рди рдХреА рдЬрд╛рдирдХрд╛рд░реА рдФрд░ рдореМрд╕рдо рдХреЗ рдЕрдиреБрд╕рд╛рд░ рд╣рд┐рдВрджреА рдореЗрдВ рд╕рд▓рд╛рд╣ рджреЗрдВред

{input_summary}

ЁЯМжя╕П рдореМрд╕рдо рдХреА рдЬрд╛рдирдХрд╛рд░реА:
- рддрд╛рдкрдорд╛рди: {weather['temp']}┬░C
- рд╕реНрдерд┐рддрд┐: {weather['condition']}
- рдирдореА: {weather['humidity']}%

тЬЕ рдХреГрдкрдпрд╛:
1. рд╣рд┐рдВрджреА рдореЗрдВ рд╕рд░рд▓ рдЙрддреНрддрд░ рджреЗрдВред
2. рд╡рд░реНрддрдорд╛рди рдореМрд╕рдо рдХреЗ рдЕрдиреБрд╕рд╛рд░ рдХреМрди рд╕реА рдлрд╕рд▓ рдмреЛрдиреА рдЪрд╛рд╣рд┐рдП рдмрддрд╛рдПрдВред
3. рдпрджрд┐ рдЬрд╝рдореАрди рдпрд╛ рдлрд╕рд▓ рдореЗрдВ рдХреЛрдИ рд╕рдорд╕реНрдпрд╛ рд╣реЛ рддреЛ рд╕реБрдЭрд╛рд╡ рджреЗрдВред
"""
    else:  # default: Tamil
        return f"""роирпАроЩрпНроХро│рпН роТро░рпБ роЕро▒ро┐ро╡рпБро│рпНро│ рокройрпНроорпКро┤ро┐ ро╡ро┐ро╡роЪро╛роп роЖро▓рпЛроЪроХро░рпН AI. 
ро╡ро┐ро╡роЪро╛ропро┐ропро┐ройрпН роЙро│рпНро│рпАроЯрпБроХро│рпН рооро▒рпНро▒рпБроорпН ро╡ро╛ройро┐ро▓рпИ роЕроЯро┐рокрпНрокроЯрпИропро┐ро▓рпН родрооро┐ро┤ро┐ро▓рпН роЖро▓рпЛроЪройрпИ ро╡ро┤роЩрпНроХро╡рпБроорпН.

{input_summary}

ЁЯМжя╕П родро▒рпНрокрпЛродрпИроп ро╡ро╛ройро┐ро▓рпИ:
- ро╡рпЖрокрпНрокроиро┐ро▓рпИ: {weather['temp']}┬░C
- роиро┐ро▓рпИ: {weather['condition']}
- роИро░рокрпНрокродроорпН: {weather['humidity']}%

тЬЕ роЙроЩрпНроХро│рпН рокродро┐ро▓ро┐ро▓рпН:
1. родрооро┐ро┤ро┐ро▓рпН роОро│ро┐роорпИропро╛роХ ро╡ро┐ро│роХрпНроХро╡рпБроорпН.
2. родро▒рпНрокрпЛродрпБ роОройрпНрой ро╡ро┐родрпИроХрпНроХро▓ро╛роорпН роОройрпНрокродрпИроЪрпН роЪрпКро▓рпНро▓ро╡рпБроорпН.
3. роиро┐ро▓роорпН роЕро▓рпНро▓родрпБ рокропро┐ро░рпН родрпКроЯро░рпНрокро╛рой роЪро┐роХрпНроХро▓рпНроХро│рпН роЗро░рпБроирпНродро╛ро▓рпН рокро░ро┐роирпНродрпБро░рпИ роЪрпЖропрпНропро╡рпБроорпН.
"""


'''def build_prompt(text=None, audio_text="", image_desc="", weather=None):
    """
    Builds a clear prompt combining all farmer inputs and weather.
    Returns a complete instruction string for the AI model.
    """
    text = text or ""
    audio_text = audio_text or ""
    image_desc = image_desc or ""
    weather = weather or {"temp": "NA", "humidity": "NA", "condition": "NA"}

    combined_input = " ".join([text.strip(), audio_text.strip(), image_desc.strip()]).strip()

    if not combined_input:
        combined_input = "[No input provided]"

    return f"""You are a multilingual agricultural assistant AI specialized in helping Tamil farmers.

Farmer's input (may include text, audio, or image description):
{combined_input}

Current weather in their area:
- ЁЯМб Temperature: {weather['temp']}┬░C
- ЁЯМе Condition: {weather['condition']}
- ЁЯТз Humidity: {weather['humidity']}%

Please provide:
1. A useful and short farming recommendation (in Tamil).
2. If applicable, suggest what crop to plant now based on the input and weather.
3. Keep the response clear and beginner-friendly.
"""
'''